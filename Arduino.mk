PWD=$(CURDIR)
HOSTNAME := $(shell hostname -s)
PYTHON=python
ARDUINO_PACKAGES=$(HOME)/.arduino15/packages
ARDUINO_BUILDER=$(ARDUINO_ROOT)/arduino-builder
ARDUINO_HARDWARE=$(ARDUINO_ROOT)/hardware
ARDUINO_TOOLS=$(ARDUINO_ROOT)/hardware/tools
BUILDER_TOOLS=$(ARDUINO_ROOT)/tools-builder
AVRDUDE=$(ARDUINO_TOOLS)/avr/bin/avrdude -C $(ARDUINO_TOOLS)/avr/etc/avrdude.conf

ARDUINO_TARGET:=arduino:avr
ifeq ("$(TARGET)", "Mega2560")
ARDUINO_FQBN:=$(ARDUINO_TARGET):mega:cpu=atmega2560
UPLOAD_DEVICE:=atmega2560
BAUDRATE:=115200
endif
ifeq ("$(TARGET)", "ProMini")
ARDUINO_FQBN:=$(ARDUINO_TARGET):pro:cpu=16MHzatmega328
UPLOAD_DEVICE:=atmega328p
BAUDRATE:=57600
endif
ifeq ("$(TARGET)", "Uno")
ARDUINO_FQBN:=$(ARDUINO_TARGET):uno
UPLOAD_DEVICE:=atmega328p
BAUDRATE:=115200
endif
ifeq ("$(TARGET)", "ESP32")
UPLOAD_DEVICE:=esp32
BAUDRATE:=921600
ESP32_CPUFREQ:=240
ESP32_PSRAM:=disabled
ESP32_PARTSCHEME:=min_spiffs
ESP32_DEBUGLEVEL:=none
ESP32_FLASHSIZE:=4M
ESP32_FLASHFREQ:=80
ESp32_FLASHMODE:=qio
ESP32_OPTIONS:=PSRAM=$(ESP32_PSRAM),PartitionScheme=$(ESP32_PARTSCHEME),CPUFreq=$(ESP32_CPUFREQ),FlashMode=$(ESp32_FLASHMODE),FlashFreq=$(ESP32_FLASHFREQ),FlashSize=$(ESP32_FLASHSIZE),UploadSpeed=$(BAUDRATE),DebugLevel=$(ESP32_DEBUGLEVEL)
ARDUINO_FQBN:=esp32:esp32:esp32:$(ESP32_OPTIONS)
ESP32_UPLOAD=$(PYTHON) $(ARDUINO_PACKAGES)/esp32/tools/esptool_py/2.6.1/esptool.py
ESP32_UPLOAD_OPTIONS=--before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 80m --flash_size detect 0xe000 $(ARDUINO_PACKAGES)/esp32/hardware/esp32/1.0.4/tools/partitions/boot_app0.bin 0x1000 $(ARDUINO_PACKAGES)/esp32/hardware/esp32/1.0.4/tools/sdk/bin/bootloader_qio_80m.bin 0x10000
endif
HOSTPROPS := $(shell find * -depth -maxdepth 0 -name $(HOSTNAME).mk -type f)
ARDUINO_FQBN := $(if $(ARDUINO_FQBN),$(ARDUINO_FQBN),mega:cpu=atmega2560)
UPLOAD_DEVICE := $(if $(UPLOAD_DEVICE),$(UPLOAD_DEVICE),atmega2560)
BAUDRATE := $(if $(BAUDRATE),$(BAUDRATE),115200)
SKETCH := $(if $(SKETCH),$(SKETCH),$(notdir $(CURDIR)))
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
ARDUINO_ROOT=/Applications/Arduino.app/Contents/Java
else
ARDUINO_ROOT=/usr/share/arduino
endif
AVRDUDE_OPTS=
ifeq ($(UPLOAD_DEVICE),atmega2560)
AVRDUDE_OPTS+=-cwiring
endif
AVRSIM=simavr
SYSTEM_LIBRARIES=$(ARDUINO_ROOT)/libraries
PROJECT_LIBRARIES=../libraries
GITHUB_LIBPATH=$(PROJECT_LIBRARIES)/github.com
ENSURE_DIR := $(shell mkdir -p $(GITHUB_LIBPATH))
ifneq ("$(GITHUB_REPOS)","")
ENSURE_DIR := $(shell cd $(GITHUB_LIBPATH) && mkdir -p $(GITHUB_REPOS))
endif
GITHUB_EMPTYDIRS+=$(sort $(shell cd $(GITHUB_LIBPATH) && find * -depth -maxdepth 2 -type d -empty 2> /dev/null))
GITHUB_POPULATEDIRS=$(sort $(shell cd $(GITHUB_LIBPATH) && find * -depth -mindepth 1 -maxdepth 1 -type d -not -empty 2> /dev/null))
GITHUB_DIRS=$(shell cd $(GITHUB_LIBPATH) && find * -depth -maxdepth 0 -type d 2> /dev/null )
GITHUB_LIBRARIES:=$(addprefix -libraries $(GITHUB_LIBPATH)/,$(GITHUB_DIRS))
ARDUINO_OPTS=-warnings all
ifeq ("$(VERBOSE)","1")
ARDUINO_OPTS += -verbose
AVRDUDE_OPTS += -v
else
AVRDUDE_OPTS += -q
endif
ifeq ("$(SILENT)","1")
ARDUINO_OPTS += -quiet
AVRDUDE_OPTS += -q
endif
BUILDER_CMD=$(ARDUINO_BUILDER) -hardware $(ARDUINO_HARDWARE) -hardware $(ARDUINO_PACKAGES) -tools $(ARDUINO_TOOLS) -tools $(BUILDER_TOOLS) -tools $(ARDUINO_PACKAGES) -libraries $(SYSTEM_LIBRARIES) -libraries $(PROJECT_LIBRARIES) $(GITHUB_LIBRARIES) -fqbn $(ARDUINO_FQBN) $(ARDUINO_OPTS) 

ifndef SSH_UPLOAD_USER
SSH_UPLOAD_USER := pi
endif

# Check to see if we have a host specific override file for PORT variable
ifneq ("$(HOSTPROPS)", "")
include $(HOSTPROPS)
endif

AVRDUDECMD=$(AVRDUDE)
ifneq ("$(UPLOAD_HOSTS)", "")
ifeq ($(filter $(HOSTNAME),$(UPLOAD_HOSTS)),)
AVRDUDECMD = @echo "\nSketch upload disabled. Uploading only allowed on: $(UPLOAD_HOSTS)\n\n"
ESP32_UPLOAD = $(AVRDUDECMD)
endif
endif

# Add dependencies generated by arduino-builder
DEPENDS=$(shell tail -n +2 .build/sketch/$(SKETCH).ino.cpp.d 2> /dev/null | perl -pe 's/\\\n//')

all: build

github_clone:
	@for dir in $(GITHUB_EMPTYDIRS) ; do \
		echo Cloning : https://github.com/$$dir ; \
		git clone https://github.com/$$dir $(GITHUB_LIBPATH)/$$dir ; \
	done

github_pull:
	@for dir in $(GITHUB_POPULATEDIRS) ; do \
		echo Refresh : $(GITHUB_LIBPATH)/$$dir ; \
		cd $(GITHUB_LIBPATH)/$$dir && git pull ; \
	done

.build/$(SKETCH).ino.hex: $(SKETCH).ino $(DEPENDS)
	@mkdir -p .build
	@echo $(BUILDER_CMD) -build-path $(PWD)/.build $(SKETCH).ino
	@$(BUILDER_CMD) -build-path $(PWD)/.build $(SKETCH).ino

build: github_clone .build/$(SKETCH).ino.hex

upload:
ifneq ("$(SSH_UPLOAD_HOST)", "")
	@echo "\nUploading to $(SSH_UPLOAD_HOST)"
	scp .build/$(SKETCH).ino.hex $(SSH_UPLOAD_USER)@$(SSH_UPLOAD_HOST):roms
	ssh $(SSH_UPLOAD_USER)@$(SSH_UPLOAD_HOST) roms/flash.sh $(SKETCH) $(shell strings .build/$(SKETCH).ino.elf | grep -m 1 ReelTwoSMQ.h 2> /dev/null)
	@echo
else ifneq ("$(ESP32_UPLOAD)", "")
	@echo "\nUploading on $(HOSTNAME)"
	@echo $(ESP32_UPLOAD) --chip $(UPLOAD_DEVICE) --port $(PORT) --baud $(BAUDRATE) $(ESP32_UPLOAD_OPTIONS) .build/$(SKETCH).ino.bin 0x8000 .build/$(SKETCH).ino.partitions.bin 
	@$(ESP32_UPLOAD) --chip $(UPLOAD_DEVICE) --port $(PORT) --baud $(BAUDRATE) $(ESP32_UPLOAD_OPTIONS) .build/$(SKETCH).ino.bin 0x8000 .build/$(SKETCH).ino.partitions.bin 
	@echo
else
	@echo "\nUploading on $(HOSTNAME)"
	$(AVRDUDECMD) -p$(UPLOAD_DEVICE) -carduino $(AVRDUDE_OPTS) -P$(PORT) -b$(BAUDRATE) -D -U flash:w:.build/$(SKETCH).ino.hex:i
	@echo
endif

run:
	$(AVRSIM) -m $(UPLOAD_DEVICE) .build/$(SKETCH).ino.elf

debug:
	@echo "\nStart avr-gdb process:\n"
	@echo $(ARDUINO_TOOLS)/avr/bin/avr-gdb $(PWD)/.build/$(SKETCH).ino.elf -ex '"target remote localhost:1234"'
	@echo
	@$(AVRSIM) -m $(UPLOAD_DEVICE) -g .build/$(SKETCH).ino.elf

clean:
	@rm -rf $(PWD)/.build
